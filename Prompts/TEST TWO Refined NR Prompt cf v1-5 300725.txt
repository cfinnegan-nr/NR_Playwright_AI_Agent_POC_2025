Role:
You are an expert software tester and automation engineer specializing in Microsoft Playwright TypeScripttest automation, working with MCP server integration through the Roo Code agent plug-in.

Context:
Generate complete Playwright TypeScript code for a new test automation scenario in a file named 'WLMEUList.spec.ts' in Visual Studio Code using the Roo Code agent plug-in. The project will follow Playwright best practices with TypeScript configuration. This code generation exercise must connection to a Playwright MCP Server within the IDE session and leverage the Playwright MCP server capabilities for enhanced browser operations, element interactions, and debugging through the Roo Code agent plug-in integration during code generation, but must execute independently without requiring MCP server runtime connections. The code must be production-ready with comprehensive documentation, robust error handling, and resilience against UI changes through intelligent element detection strategies.




New Test Generation Requirements:
- Create NEW Test file: 'WLMEUList.spec.ts' located in 'tests/ui/WLM/Lists/' directory. This file is added as a new test into the existing Playwright project located in this Visual Studio Code IDE session.
- Code generation: Generate the code in the new 'WLMEUList.spec.ts' file to implement the test steps below.
- Login code: Reuse the conventions for login and main menu navigation in the new test 'WLMEUList.spec.ts' already established in the existing test file 'WLMAgencyList.spec.ts'.
- Credentials: Use values in constants file for URL access and verification of credentials.
- Verify Test: Once the code generation phase has completed, execute the 'WLMEUList.spec.ts' test to confirm test runs successfully.
- Terminal Window Interaction: This is a Windows laptop environment and syntax for any Terminal Window commands needs to reflect this environment.





Test Implementation (execute in exact sequence using the code generation capabilities of the Playwright MCP server):

1.Connect to the Playwright MCP server and navigate to NETREVEAL_URL from constants.
2.Maximize browser window.
3.Log into application.
8.Identify and click the menu item for 'Watchlist Manager'.
8.Identify and click the submenu item for 'Lists'.
8.Identify and click the submenu item for 'Standard Lists'.
11.Identify and click the 'EU List' hyperlink in the 'Lists' section on the page UI using robust element interaction.
14.Assert that the 'eu_name' text is present and visible on the page in the section named 'Search Indexes', under a column named 'Index Name'.
15.Generate test report output indicating success/failure.




Additional Information:
Reuse the code steps defined in the 'WLMAgencyList.spec.ts' for logging into the application and opening the main menu.
Use the 'WLMAgencyList.spec.ts' as a template guide to menu navigation for this test.
Ensure that the project guidelines in the 'Agent.md' file in the project root directory are followed in the execution of the response.




Output Requirements:
Provide the complete project structure with all files for independent execution:

1.tests/WLM/Lists/WLMEUList.spec.ts
2.New page object file for StandardList screen under '\watchlistManager' directory.
2.Any other required configuration updates.


Ensure each test step is explicitly implemented in code as a result of responses returned during the code generation session using a connection to the Playwright MCP Server functions. The final code should be immediately executable in any standard Playwright environment without requiring MCP server runtime connections, while still benefiting from the Playwright MCP server intelligence during the code generation phase through the Roo Code agent plug-in.