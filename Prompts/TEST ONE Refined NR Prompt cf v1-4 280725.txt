Role:
You are an expert software tester and automation engineer specializing in Microsoft Playwright TypeScripttest automation, working with MCP server integration through the Roo Code agent plug-in.

Context:
Generate complete Playwright TypeScript code for a new test automation scenario in Visual Studio Code using the Roo Code agent plug-in. The project will follow Playwright best practices with TypeScript configuration. The code generation exercise must leverage the Playwright MCP server capabilities for enhanced browser operations, element interactions, and debugging through the Roo Code agent plug-in integration during code generation, but must execute independently without requiring MCP server runtime connections. The code must be production-ready with comprehensive documentation, robust error handling, and resilience against UI changes through intelligent element detection strategies.

MCP Server Integration Requirements (Code Generation Phase Only):
Code Generation Phase: Initiate a connection to the Playwright MCP server and use the capabilities of the Playwright MCP server during the code generation session.
Code Generation Phase: Before any UI operation, allow the Playwright MCP server to perform HTML structure analysis to generate robust selectors.
Code Generation Phase: Use the Playwright MCP server through Roo Code agent to analyze and generate optimal test code structure.
Code Generation Phase: Use the Playwright MCP server for syntax validation and error correction during code generation.
Code Generation Phase: Connect to the sequentialthinking MCP server to repeat debugging steps as needed until there are no syntax errors in the test code (one user permission confirmation is sufficient for this session).
Runtime Phase: Generated code must execute independently using standard Playwright APIs without MCP server dependencies




Project Structure Requirements:
Create a new Playwright TypeScript project structure within the IDE.
Insert the attached 'agent.md' configuration file in the project root.
Test file: 'WLMAgencyList.spec.ts' located in 'tests/ui/WLM/Synonyms/' directory
Constants file: 'config/constants.ts' with the following values:
NETREVEAL_URL: "https://10.222.2.239:8443/netreveal/login.do"
USERNAME: "admin"
PASSWORD: "password"
Page Object Model: Connect to the Playwright MCP server capabilities to determine the approprate page object files to create under appropriate sub-directories under the main /pages directory and that these files contain all element selectors.
Configuration: Include 'playwright.config.ts' with appropriate settings.
Once the code generation phase has completed, ensure all dependencies are downloaded and installed to allow the Playwright TypeScript 'WLMAgencyList.spec.ts' test to be executed. 
This is a Windows laptop environment and syntax for any Terminal Window commands needs to reflect this environment.




Test Implementation (execute in exact sequence using the code generation capabilities of the Playwright MCP server):

1.Connect to the Playwright MCP server and navigate to NETREVEAL_URL from constants.
2.Maximize browser window.
3.Identify the username field and input USERNAME.
4.Identify the password field and input PASSWORD.
5.Identify and click the login button 
7.Identify and click the main menu button.
8.Navigate to 'Watchlist Manager' menu item by identifying and clicking the menu item for 'Watchlist Manager'.
9.Navigate to 'Synonyms' submenu item by identifying and clicking the menu item for 'Synonyms'.
10.Navigate to 'Synonyms Rules Manager' submenu item by identifying and clicking the menu item for 'Synonyms Rules Manager'.
11.Identify 'Name' column in the 'Synonym Rule Sets' section on the page UI.
12.If the value 'Weighted words rule set' hyperlink is not visible in the UI then identify and click on the sort icon in the 'Name' column.
13.Click 'Weighted words rule set' hyperlink using robust element interaction.
14.Assert that 'agency rule' hyperlink is present and visible on the page.
15.Generate test report output indicating success/failure.




Technical Specifications:
No hardcoded values in test files - all values from constants.ts
All element selectors stored in Page Object Model classes after identification by the Playwright MCP Server page analysis.
Critical: No runtime dependencies on MCP server - all code must execute with standard Playwright installation
Ensure that the code executes an actual assertion to indicate that the key test step has been successful.





Output Requirements:
Provide the complete project structure with all files for independent execution:

1.playwright.config.ts (standard Playwright configuration)
2.config/constants.ts
3.pages/LoginPage.ts 
4.pages/WatchlistManagerPage.ts 
5.tests/WLM/Synonyms/WLMAgencyList.spec.ts 
6.package.json with standard Playwright dependencies only
7.Utility helpers using only standard Playwright capabilities

Ensure each test step is explicitly implemented in code as a result of responses returned during the code generation session using a connection to the Playwright MCP Server functions. The final code should be immediately executable in any standard Playwright environment without requiring MCP server runtime connections, while still benefiting from the Playwright MCP server intelligence during the code generation phase through the Roo Code agent plug-in.